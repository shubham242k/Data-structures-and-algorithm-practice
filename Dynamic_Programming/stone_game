//recursion + memoization
class Solution {
    public boolean stoneGame(int[] piles) {
        int l = piles.length;
        int m = helper(piles,0,l-1,new Integer[l][l]);
      
        if(m>sum/2){
            return true;
        }else{
            return false;
        }
    }
    static int sum = 0;
    public int helper(int[] a,int s,int e,Integer[][] memo){
        if(s == e){
            sum +=a[s];
            memo[e][s] = a[s];
            return memo[e][s];
        }
        
        if(s+1 == e){
            memo[e][s] =  Math.max(a[s],a[e]);
            return memo[e][s];
        }
        if(memo[e][s] != null){
            return memo[e][s];
        }
        int x = helper(a,s+1,e-1,memo);
        int c1 = a[s] + Math.min(x,helper(a,s+2,e,memo));
        int c2 = a[e] + Math.min(x,helper(a,s,e-2,memo));
        memo[e][s] = Math.max(c1,c2);
        return memo[e][s];
    }
}


//topdown approach
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int m = s.nextInt();
        int[][] maze = new int[n][m];
        
        for(int i = 0;i<n;i++){
            for(int j = 0; j < m; j++){
                maze[i][j] = s.nextInt();
            }
        }
        
        Integer[][] dp = new Integer[n][m];
        int min = mincostmemo(maze,0,0,n-1,m-1,dp);
        
        System.out.println(min);
    }
    //tabulation
    public static int mincosttab(int[][] maze,int[][]dp){
        int n = maze.length;
        int m = maze[0].length;
        
        for(int i = n-1;i>=0;i--){
            for(int j = m - 1;i>=0;j--){
                if(j == m - 1 && i == n - 1 ){
                    dp[n-1][m-1] = maze[i][j];
                }else if(i == n - 1){
                    dp[i][j] = dp[i][j + 1] + maze[i][j]; 
                }else if(j == m - 1){
                    dp[i][j] = dp[i + 1][j] + maze[i][j]; 
                }else{
                    dp[i][j] = Math.min(dp[i + 1][j], dp[i][j + 1]) +  maze[i][j];
                }
            }
        }
        return dp[0][0];
    }
    
    //memoization
     public static int mincostmemo(int[][] maze,int sr,int sc,int dr,int dc,Integer[][] dp){
        if(sr == dr && sc == dc){
            return maze[sr][sc];
        }
        
        if(sr<0 || sc <0 || sr>=maze.length || sc >= maze[0].length){
            return Integer.MAX_VALUE;
        }
        if(dp[sr][sc] != null){
            return dp[sr][sc];
        }
      int max = Math.min(mincostmemo(maze,sr+1,sc,dr,dc,dp)
                                            ,mincostmemo(maze,sr,sc+1,dr,dc,dp));
        
        dp[sr][sc] = max + maze[sr][sc];
        return dp[sr][sc] ;
    }
    
    //recursion
    public static int mincost(int[][] maze,int sr,int sc,int dr,int dc){
        if(sr == dr && sc == dc){
            return maze[sr][sc];
        }
        
        if(sr<0 || sc <0 || sr>=maze.length || sc >= maze[0].length){
            return Integer.MAX_VALUE;
        }
        
        int max = Math.min(mincost(maze, sr+1,sc ,dr ,dc ),mincost(maze,sr ,sc+1, dr , dc));
        
        return max + maze[sr][sc];
    }

}
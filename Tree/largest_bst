class Solution{
    
    // Return the size of the largest sub-tree which is also a BST
    static class Pair{
        int max;
        int min;
        boolean isBst;
        int sum;
    }
    static int largestBst(Node root)
    {
        return helper(root).sum;
        
    }
    
    public static Pair helper(Node root){
        if(root == null){
            Pair bp = new Pair();
            bp.max = Integer.MIN_VALUE;
            bp.min = Integer.MAX_VALUE;
            bp.isBst = true;
            bp.sum = 0;
            return bp;
        }
        
        Pair lp = helper(root.left);
        Pair rp = helper(root.right);
        
        Pair mp = new Pair();
        
        mp.isBst = lp.isBst && rp.isBst && (root.data > lp.max && root.data<rp.min);
        mp.max = Math.max(root.data,Math.max(lp.max,rp.max));
        mp.min = Math.min(root.data,Math.min(lp.min,rp.min));
        
        if(mp.isBst){
            mp.sum = lp.sum + rp.sum + 1;
        }else{
            mp.sum = Math.max(lp.sum,rp.sum);
        }
        
        return mp;
        
    }
    
}
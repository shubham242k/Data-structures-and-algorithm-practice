//my approach

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int n = s.length();
        Integer[][] dp = new Integer[n][n];
        // System.out.println(lps(s,0,s.length()-1,dp));
        lps_tab(s);
    }
    public static void lps_tab(String s){
        int n = s.length();
        int[][] dp = new int[n][n];
        
        for(int g = 0;g<n;g++){
            for(int i = 0,j=i+g;j<n;j++,i++){
                if(g == 0){
                    dp[i][j] = 1;
                }else if(g == 1){
                    if(s.charAt(i) == s.charAt(j)){
                        dp[i][j] = 2;
                    }else{
                        dp[i][j] = 1;
                    }
                }else{
                    if(s.charAt(i) == s.charAt(j)){
                        int len = dp[i+1][j-1];
                        if(len == j - i -1){
                            dp[i][j] = len +2;
                        }else{
                            dp[i][j] = Math.max(len,Math.max(dp[i+1][j],dp[i][j-1]));
                        }
                    }else{
                        dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);
                    }
                }
            }
        }
        
        System.out.println(dp[0][n-1]);
    }
    public static int lps(String s,int i,int j,Integer[][] dp){
        if(i > j)return 0;
        if(i == j)return 1;
        if(dp[i][j] != null){
            return dp[i][j];
            
        }
        if(j == i + 1){
            if(s.charAt(i) == s.charAt(j)){
                dp[i][j] = 2;
                
            }else{
                dp[i][j] = 1;
            }
            return dp[i][j];
        }
 
        if(s.charAt(i) == s.charAt(j)){
            int len = lps(s,i+1,j-1,dp) ;
            int len2 = 0;
            if(len == j - i -1){
               len = len + 2;
            }else{
               len2 = Math.max(lps(s,i,j-1,dp),lps(s,i+1,j,dp));
            }
            dp[i][j] = Math.max(len,len2);
            return dp[i][j];
        }else{
            dp[i][j] =  Math.max(lps(s,i,j-1,dp),lps(s,i+1,j,dp));
            return dp[i][j];
        }
    }

}
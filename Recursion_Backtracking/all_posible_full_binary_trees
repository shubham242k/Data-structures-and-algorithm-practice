class Solution {
    public List<TreeNode> allPossibleFBT(int n) {
     Map<Integer,List<TreeNode>> m = new HashMap<>();
        return helper(n,m);
    }
    
    public List<TreeNode> helper(int n, Map<Integer,List<TreeNode>> m){
        if(m.containsKey(n)){
            return m.get(n);
        }
            List<TreeNode> l = new ArrayList<>();
        
       if(n == 1){
            l.add(new TreeNode(0));
            return l;
        }
        if(n%2!=0){
            for(int i = 1;i<=n-1;i+=2){
                List<TreeNode> lf = allPossibleFBT(i);
                 List<TreeNode> rf = allPossibleFBT(n-1-i);
                for(TreeNode left : lf){
                    for(TreeNode r : rf){
                        TreeNode root = new TreeNode(0);
                        root.left = left;
                        root.right = r;
                        l.add(root);
                    }
                }
            }
        }
        m.put(n,l);
        return l;
        
    }
}
class Solution {
    public int maxDistance(int[][] grid) {
        int n = grid.length;
         Deque<int[]> q = new ArrayDeque<>();
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(grid[i][j] == 1){
                    int[] item = {i,j,0};
                    q.add(item);
                }
            }
        }
        if(q.size()==0 || q.size()== n*n){
            return -1;
        }
        
        return bfs(grid,q);
    }
    
    public int bfs(int[][] grid,Deque<int[]> q){
        int[] dx = {-1,0,1,0};
        int[] dy = {0,1,0,-1};
        int n = grid.length;
        int t = -1;
        while(!q.isEmpty()){
            int[] rem = q.remove();
            // if(grid[rem[0]][rem[1]] == 1){
            //     continue;
            // }
            // vis[rem[0]][rem[1]] = 1;
            t =(rem[2]);
            for(int i = 0;i<dx.length;i++){
                int nx = rem[0] + dx[i];
                int ny = rem[1] + dy[i];
                if(safe(grid,nx,ny)){
                    int[] it = {nx,ny,rem[2]+1};
                    q.add(it);
                    grid[nx][ny] = 1;
                }
            }
        }
        
        return t;
    }
    
    public boolean safe(int[][] grid,int r,int c){
        return(r>=0 && r<grid.length && c>=0 && c< grid.length && grid[r][c] == 0);
    }
}
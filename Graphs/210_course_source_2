class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] vis = new int[numCourses];
        Stack<Integer> set = new Stack<Integer>();
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for(int i = 0; i < numCourses; i++){
            graph[i] = new ArrayList();
        }
        for(int[] p : prerequisites){
            graph[p[0]].add(p[1]);
        }
        
        for(int i = 0 ;i<numCourses;i++){
            if(vis[i] == 0){
                if(!dfs(graph,vis,i,set)) return new int[0];
            }
        }
        int[] ans = new int[set.size()];
        int i = set.size()-1;
        while(set.size()>0){
            ans[i] = set.pop();
            i--;
        } 
        return ans;
    }
     public boolean dfs(ArrayList<Integer>[] graph,int[] vis,int src,Stack<Integer> set){
        vis[src] = 1;
        for(int nbr : graph[src]){
            if(vis[nbr] == 0){
                if(!dfs(graph,vis,nbr,set)) return false;      
            }else if(vis[nbr] == 1){
                return false;
            }
        }
        vis[src] = 2;
        set.push(src);
         return true;
    }
}
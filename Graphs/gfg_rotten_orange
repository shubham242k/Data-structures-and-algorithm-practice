class Solution
{
    class Pair{
        int x;
        int y;
        Pair(int x,int y){
            this.x = x;
            this.y = y;
        }
    }
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        int[] dx = {-1,1,0,0};
        int[] dy = {0,0,-1,1};
        Deque<Pair> q = new ArrayDeque<>();
        for(int i = 0;i<grid.length;i++){
            for(int j = 0;j<grid[0].length;j++){
                if(grid[i][j] == 2){
                    q.add(new Pair(i,j));
                    
                }
            }
        }
        int timer = -1;
        while(!q.isEmpty()){
            int size = q.size();
            // boolean isg = false;
            for(int i = 0;i<size;i++){
                Pair rem = q.element();
                
                for(int j = 0;j<dx.length;j++){
                    if(isWay(rem.x + dx[j], rem.y + dy[j],grid)){
                        // isg = true;
                        grid[rem.x + dx[j]][rem.y+dy[j]] = 2;
                        q.add(new Pair(rem.x + dx[j],rem.y + dy[j]));
                        
                    }
                }
                q.remove();
            }
            timer++;
        }
    
        for(int i = 0;i<grid.length;i++){
            for(int j = 0;j<grid[0].length;j++){
                if(grid[i][j] == 1){
                    return -1;
                    
                }
            }
        }
        return timer;
        
        // Code here
    }
    
    public boolean isWay(int r,int c, int[][] grid){
       if(r >= 0 && r < grid.length && c >= 0 && c < grid[0].length && grid[r][c] == 1) 
            return true;
        return false;
    }
    
}